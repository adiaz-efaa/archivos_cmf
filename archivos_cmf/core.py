# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['Fecha', 'fecha', 'Cadena', 'cadena', 'Entero', 'entero', 'EnteroSigno', 'entero_signo', 'Flotante',
           'flotante', 'FlotanteSigno', 'flotante_signo']

# Cell
from typing import List, Union, Dict
from datetime import date, datetime
from pydantic import NonNegativeInt, NonNegativeFloat
from pydantic.dataclasses import dataclass
import io

# Cell
@dataclass
class Fecha:
    fecha: date

    def __str__(self):
        return self.fecha.isoformat().replace("-", "")

    def __len__(self):
        return 8

# Cell
def fecha(fecha: date) -> Fecha:
    return Fecha(fecha=fecha)

# Cell
@dataclass
class Cadena:
    valor: str
    largo: NonNegativeInt

    def __str__(self):
        return self.valor[0: min(len(self.valor), abs(self.largo))].ljust(abs(self.largo), ' ')

    def __len__(self):
        return abs(self.largo)

# Cell
def cadena(valor: str, largo: NonNegativeInt) -> Cadena:
    return Cadena(valor=valor, largo=largo)

# Cell
@dataclass
class Entero:
    valor: NonNegativeInt
    largo: NonNegativeInt

    def __str__(self):
        return str(abs(int(round(self.valor, 0)))).zfill(abs(self.largo))

    def __len__(self):
        return abs(self.largo)

# Cell
def entero(valor: NonNegativeInt, largo: NonNegativeInt) -> Entero:
    return Entero(valor=valor, largo=largo)

# Cell
@dataclass
class EnteroSigno:
    valor: int
    largo: NonNegativeInt

    def __str__(self):
        sgn = "+" if self.valor >= 0 else "-"
        return str(abs(int(round(self.valor, 0)))).zfill(abs(self.largo)) + sgn

    def __len__(self):
        return abs(self.largo) + 1

# Cell
def entero_signo(valor: int, largo: NonNegativeInt) -> EnteroSigno:
    return EnteroSigno(valor=valor, largo=largo)

# Cell
@dataclass
class Flotante:
    valor: NonNegativeFloat
    largo_entero: NonNegativeInt
    largo_decimales: NonNegativeInt

    def __str__(self):
        entero = int(abs(self.valor))
        decimales = round(abs(self.valor) - entero, abs(self.largo_decimales))
        return (
            str(entero).rjust(abs(self.largo_entero), '0') +
            str(decimales).replace("0.", "").ljust(abs(self.largo_decimales), '0')
        )

    def __len__(self):
        return abs(self.largo_entero) + abs(self.largo_decimales)

# Cell
def flotante(
    valor: NonNegativeFloat,
    largo_entero: NonNegativeInt,
    largo_decimales: NonNegativeInt
) -> Flotante:
    return Flotante(
        valor=valor,
        largo_entero=largo_entero,
        largo_decimales=largo_decimales
    )

# Cell
@dataclass
class FlotanteSigno:
    valor: float
    largo_entero: NonNegativeInt
    largo_decimales: NonNegativeInt

    def __str__(self):
        sgn = "+" if self.valor >=0 else "-"
        entero = int(abs(self.valor))
        decimales = round(abs(self.valor) - entero, abs(self.largo_decimales))
        return (
            str(entero).rjust(abs(self.largo_entero), '0') +
            str(decimales).replace("0.", "").ljust(abs(self.largo_decimales), '0') +
            sgn
        )

    def __len__(self):
        return abs(self.largo_entero) + abs(self.largo_decimales) + 1

# Cell
def flotante_signo(
    valor: float,
    largo_entero: NonNegativeInt,
    largo_decimales: NonNegativeInt
) -> FlotanteSigno:
    return FlotanteSigno(
        valor=valor,
        largo_entero=largo_entero,
        largo_decimales=largo_decimales,
    )